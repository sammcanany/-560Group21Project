@model Group21ProjectMVC.Models.CheckoutViewModels.SeatSelectionViewModel

@{
    ViewData["Title"] = "SeatSelection";
    bool setActive = true;
    string tabPane = "<div class=\"tab-pane active\" id=\"Departure\">";
    string tabPane2 = "<div class=\"tab-pane\" id=\"Return\">";
}

<div id="seatselection">
    <div class="container">

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="nav nav-pills" id="flightTabs">
            @if (Model.ReturnFlightId != 0)
            {
                <a class="nav-link active" asp-for="TripType" value=0 data-bs-toggle="tab" href="#Departure" id="DepartureTab">Departure Flight</a>
                <a class="nav-link" asp-for="TripType" value=1 data-bs-toggle="tab" href="#Return" id="ReturnTab">Return Flight</a>
            }
            else
            {
                <a class="nav-link active" asp-for="TripType" value=0 data-bs-toggle="tab" href="#Departure" id="DepartureTab">Departure Flight</a>
            }
        </div>
        <div class="tab-content">
            @foreach (var flight in Model.Flights)
            {
                if (setActive)
                {
                    @Html.Raw(tabPane)
                }
                else
                {
                    @Html.Raw(tabPane2)
                }
                <div class="row">
                    <div class="col-6">
                        <div class="btn-group btn-matrix" role="group">
                            @for (int i = 0; i < flight.Capacity / 6; i++)
                            {
                                for (int j = 0; j < 6; j++)
                                {
                                    if (flight.SeatsNotAvailable.Contains(((i + 1) * 6) - (6 - (j + 1))))
                                    {
                                        <input type="checkbox" class="btn-check" disabled id="@(((i+1)*6)-(6-(j+1)))" />
                                        <label class="btn btn-outline-primary taken" for="@(((i+1)*6)-(6-(j+1)))"></label>
                                    }
                                    else
                                    {
                                        if (setActive)
                                        {
                                            if (Model.DepartureFlightSeats != null && Model.DepartureFlightSeats.Contains(((i + 1) * 6) - (6 - (j + 1))))
                                            {
                                                <input type="checkbox" checked class="btn-check" id="@("Departure" + (((i+1)*6)-(6-(j+1))))" />
                                                <label class="btn btn-primary" for="@((((i+1)*6)-(6-(j+1))))" onclick="SelectSeat(@("Departure" + (((i+1)*6)-(6-(j+1)))))">@(((i+1)*6)-(6-(j+1)))</label>
                                            }
                                            else
                                            {
                                                <input type="checkbox" class="btn-check" id="@("Departure" + (((i+1)*6)-(6-(j+1))))" />
                                                <label class="btn btn-primary" for="@((((i+1)*6)-(6-(j+1))))" onclick="SelectSeat(@("Departure" + (((i+1)*6)-(6-(j+1)))))">@(((i+1)*6)-(6-(j+1)))</label>
                                            }
                                        }
                                        else
                                        {
                                            if (Model.DepartureFlightSeats != null && Model.ReturnFlightSeats.Contains(((i + 1) * 6) - (6 - (j + 1))))
                                            {
                                                <input type="checkbox" checked class="btn-check" id="@("Return" + (((i+1)*6)-(6-(j+1))))" />
                                                <label class="btn btn-primary" for="@((((i+1)*6)-(6-(j+1))))" onclick="SelectSeat(@("Return" + (((i+1)*6)-(6-(j+1)))))">@(((i+1)*6)-(6-(j+1)))</label>
                                            }
                                            else
                                            {
                                                <input type="checkbox" class="btn-check" id="@("Return" + (((i+1)*6)-(6-(j+1))))" />
                                                <label class="btn btn-primary" for="@((((i+1)*6)-(6-(j+1))))" onclick="SelectSeat(@("Return" + (((i+1)*6)-(6-(j+1)))))">@(((i+1)*6)-(6-(j+1)))</label>
                                            }
                                        }

                                    }
                                    if (j == 2)
                                    {
                                        <input type="checkbox" class="btn-check" disabled id="@("row"+i+1)" />
                                        <label class="btn btn-none" for="@("row"+i+1)">@(i+1)</label>
                                    }
                                }
                            }
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="card">
                            <ul class="list-group passengerList" id="@(setActive ? "DepartureList":"ReturnList")">
                                @for (int k = 0; k < Model.FirstNames.Count; k++)
                                {
                                    if (k == 0)
                                    {
                                        <li title="@(Model.FirstNames[k] + " " + Model.LastNames[k])" id="@(setActive ? ("DepartureList"+k):("ReturnList"+k))" onclick="SelectListItem(@(setActive ? ("DepartureList"+k):("ReturnList"+k)))" class="delta passenger list-group-item selected">
                                            <div class="row-noBreak" id="passenger[k]">
                                                <div class="span8 passengerName">
                                                    <span>@(Model.FirstNames[k] + " " + Model.LastNames[k])</span>
                                                </div>
                                                @if (setActive)
                                                {
                                                    <div class="span2 pushLeft seatNumber">@(Model.DepartureFlightSeats != null && k < Model.DepartureFlightSeats.Count() && Model.DepartureFlightSeats[k] != 0 ?Model.DepartureFlightSeats[k]:"--")</div>
                                                }
                                                else
                                                {
                                                    <div class="span2 pushLeft seatNumber">@(Model.ReturnFlightSeats != null && k < Model.ReturnFlightSeats.Count() && Model.ReturnFlightSeats[k] != 0?Model.ReturnFlightSeats[k]:"--")</div>
                                                }
                                            </div>
                                        </li>
                                    }
                                    else
                                    {
                                        <li title="@(Model.FirstNames[k] + " " + Model.LastNames[k])" id="@(setActive ? ("DepartureList"+k):("ReturnList"+k))" onclick="SelectListItem(@(setActive ? ("DepartureList"+k):("ReturnList"+k)))" class="delta passenger list-group-item">
                                            <div class="row-noBreak">
                                                <div class="span8 passengerName">
                                                    <span>@(Model.FirstNames[k] + " " + Model.LastNames[k])</span>
                                                </div>
                                                @if (setActive)
                                                {
                                                    <div class="span2 pushLeft seatNumber">@(Model.DepartureFlightSeats != null && k < Model.DepartureFlightSeats.Count() && Model.DepartureFlightSeats[k] != 0 ?Model.DepartureFlightSeats[k]:"--")</div>
                                                }
                                                else
                                                {
                                                    <div class="span2 pushLeft seatNumber">@(Model.ReturnFlightSeats != null && k < Model.ReturnFlightSeats.Count() && Model.ReturnFlightSeats[k] != 0 ?Model.ReturnFlightSeats[k]:"--")</div>
                                                }
                                            </div>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                        <span asp-validation-for="DepartureFlightSeats" class="text-danger"></span><br>
                        <span asp-validation-for="ReturnFlightSeats" class="text-danger"></span>
                    </div>
                </div>
                @for (int x = 0; x < Model.SeatsRequired; x++)
                {
                    if (setActive)
                    {
                        if (Model.DepartureFlightSeats != null && x < Model.DepartureFlightSeats.Count())
                        {
                            <input type="hidden" value="@(Model.DepartureFlightSeats[x])" asp-for="DepartureFlightSeats" form="seatSelection" id="@("DepartureFlightSeats" + x)" />
                        }
                        else
                        {
                            <input type="hidden" value="0" asp-for="DepartureFlightSeats" form="seatSelection" id="@("DepartureFlightSeats" + x)" />
                        }
                    }
                    else
                    {
                        if(Model.ReturnFlightSeats != null && x < Model.ReturnFlightSeats.Count())
                        {
                         <input type="hidden" value="@(Model.ReturnFlightSeats[x])" asp-for="ReturnFlightSeats" form="seatSelection" id="@("ReturnFlightSeats" + x)" />   
                        }else{
                            <input type="hidden" value="0" asp-for="ReturnFlightSeats" form="seatSelection" id="@("ReturnFlightSeats" + x)" />
                        }
                    }
                }
                @Html.Raw("</div>")
                setActive = false;
            }
        </div>
        <form id="seatSelection" method="post">
            @foreach (var names in Model.FirstNames)
            {
                <input type="hidden" value="@names" asp-for="FirstNames" />
            }
            @foreach (var names in Model.LastNames)
            {
                <input type="hidden" value="@names" asp-for="LastNames" />
            }
            @for (int i = 0; i < Model.Flights.Count(); i++)
            {
                <input type="hidden" value="@Model.Flights[i]" asp-for="Flights[i]" />
            }
            <input type="hidden" value="@Model.checkif" asp-for="checkif" />
            @if (@Model.ReturnFlightId != 0)
            {
                <input type="hidden" value="@Model.DepartureFlightId" name="DepartureFlightID" />
                <input type="hidden" value="@Model.ReturnFlightId" name="ReturnFlightID" />
                <input type="hidden" value="@Model.SeatsRequired" name="SeatsRequired" />
            }
            else
            {
                <input type="hidden" value="@Model.DepartureFlightId" name="DepartureFlightID" />
                <input type="hidden" value="@Model.SeatsRequired" name="SeatsRequired" />
            }
            <div class="row">
                <div class="col-12 position-relative">
                    <button type="submit" class="btn btn-primary position-absolute bottom-0 end-0">Continue</button>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
<script src="~/js/seatselection.js" asp-append-version="true"></script>
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
<script>
    $.validator.addMethod(
        'ensureminimumelements',
        function(value, element, params) {
            console.debug(element);
            if (!this.optional(element)) {
                var otherProperty = $('#' + params.otherproperty)
                return (otherProperty.val() != value);
            }
            return true;
        });

    $.validator.unobtrusive.adapters.add(
        'ensureminimumelements', ['otherproperty', 'otherpropertyname'],
        function(options) {
            var params = {
                otherproperty: options.params.otherproperty,
                otherpropertyname: options.params.otherpropertyname
            };
            options.rules['ensureminimumelements'] = params;
            options.messages['ensureminimumelements'] = options.message;
        });
</script>
}